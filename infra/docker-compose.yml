version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: trademl_postgres
    environment:
      POSTGRES_DB: trademl
      POSTGRES_USER: trademl
      POSTGRES_PASSWORD: trademl_dev_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trademl"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: trademl_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Create MinIO buckets on startup
  minio-init:
    image: minio/mc:latest
    container_name: trademl_minio_init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb --ignore-existing myminio/raw;
      mc mb --ignore-existing myminio/curated;
      mc mb --ignore-existing myminio/reference;
      mc mb --ignore-existing myminio/models;
      mc mb --ignore-existing myminio/reports;
      echo 'MinIO buckets created successfully';
      exit 0;
      "

  # Optional: Redis for message queue / caching
  redis:
    image: redis:7-alpine
    container_name: trademl_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: MLflow tracking server
  mlflow:
    image: python:3.11-slim
    container_name: trademl_mlflow
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://trademl:trademl_dev_pass@postgres:5432/trademl
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
    ports:
      - "5000:5000"
    command: >
      sh -c "
      pip install mlflow boto3 psycopg2-binary &&
      mlflow server
        --backend-store-uri postgresql://trademl:trademl_dev_pass@postgres:5432/trademl
        --default-artifact-root s3://models/mlflow-artifacts
        --host 0.0.0.0
        --port 5000
      "
    volumes:
      - mlflow_data:/mlflow

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  mlflow_data:
    driver: local

networks:
  default:
    name: trademl_network
